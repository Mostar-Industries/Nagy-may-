# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WeatherClimateDataClimateTrends(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, seasonal_shift: str=None, temperature_trend: str=None):  # noqa: E501
        """WeatherClimateDataClimateTrends - a model defined in Swagger

        :param seasonal_shift: The seasonal_shift of this WeatherClimateDataClimateTrends.  # noqa: E501
        :type seasonal_shift: str
        :param temperature_trend: The temperature_trend of this WeatherClimateDataClimateTrends.  # noqa: E501
        :type temperature_trend: str
        """
        self.swagger_types = {
            'seasonal_shift': str,
            'temperature_trend': str
        }

        self.attribute_map = {
            'seasonal_shift': 'seasonal_shift',
            'temperature_trend': 'temperature_trend'
        }
        self._seasonal_shift = seasonal_shift
        self._temperature_trend = temperature_trend

    @classmethod
    def from_dict(cls, dikt) -> 'WeatherClimateDataClimateTrends':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WeatherClimateData_climate_trends of this WeatherClimateDataClimateTrends.  # noqa: E501
        :rtype: WeatherClimateDataClimateTrends
        """
        return util.deserialize_model(dikt, cls)

    @property
    def seasonal_shift(self) -> str:
        """Gets the seasonal_shift of this WeatherClimateDataClimateTrends.


        :return: The seasonal_shift of this WeatherClimateDataClimateTrends.
        :rtype: str
        """
        return self._seasonal_shift

    @seasonal_shift.setter
    def seasonal_shift(self, seasonal_shift: str):
        """Sets the seasonal_shift of this WeatherClimateDataClimateTrends.


        :param seasonal_shift: The seasonal_shift of this WeatherClimateDataClimateTrends.
        :type seasonal_shift: str
        """
        allowed_values = ["earlier", "normal", "later"]  # noqa: E501
        if seasonal_shift not in allowed_values:
            raise ValueError(
                "Invalid value for `seasonal_shift` ({0}), must be one of {1}"
                .format(seasonal_shift, allowed_values)
            )

        self._seasonal_shift = seasonal_shift

    @property
    def temperature_trend(self) -> str:
        """Gets the temperature_trend of this WeatherClimateDataClimateTrends.


        :return: The temperature_trend of this WeatherClimateDataClimateTrends.
        :rtype: str
        """
        return self._temperature_trend

    @temperature_trend.setter
    def temperature_trend(self, temperature_trend: str):
        """Sets the temperature_trend of this WeatherClimateDataClimateTrends.


        :param temperature_trend: The temperature_trend of this WeatherClimateDataClimateTrends.
        :type temperature_trend: str
        """
        allowed_values = ["warming", "stable", "cooling"]  # noqa: E501
        if temperature_trend not in allowed_values:
            raise ValueError(
                "Invalid value for `temperature_trend` ({0}), must be one of {1}"
                .format(temperature_trend, allowed_values)
            )

        self._temperature_trend = temperature_trend
