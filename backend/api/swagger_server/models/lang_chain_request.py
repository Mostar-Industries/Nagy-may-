# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LangChainRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, prompt: str=None, model: str='deepseek-r1-distill-qwen-7b', temperature: float=0.7, options: object=None):  # noqa: E501
        """LangChainRequest - a model defined in Swagger

        :param prompt: The prompt of this LangChainRequest.  # noqa: E501
        :type prompt: str
        :param model: The model of this LangChainRequest.  # noqa: E501
        :type model: str
        :param temperature: The temperature of this LangChainRequest.  # noqa: E501
        :type temperature: float
        :param options: The options of this LangChainRequest.  # noqa: E501
        :type options: object
        """
        self.swagger_types = {
            'prompt': str,
            'model': str,
            'temperature': float,
            'options': object
        }

        self.attribute_map = {
            'prompt': 'prompt',
            'model': 'model',
            'temperature': 'temperature',
            'options': 'options'
        }
        self._prompt = prompt
        self._model = model
        self._temperature = temperature
        self._options = options

    @classmethod
    def from_dict(cls, dikt) -> 'LangChainRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LangChainRequest of this LangChainRequest.  # noqa: E501
        :rtype: LangChainRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prompt(self) -> str:
        """Gets the prompt of this LangChainRequest.

        Input prompt for LangChain with Deepseek  # noqa: E501

        :return: The prompt of this LangChainRequest.
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt: str):
        """Sets the prompt of this LangChainRequest.

        Input prompt for LangChain with Deepseek  # noqa: E501

        :param prompt: The prompt of this LangChainRequest.
        :type prompt: str
        """

        self._prompt = prompt

    @property
    def model(self) -> str:
        """Gets the model of this LangChainRequest.

        DeepSeek model identifier for local deployment of lmstudio-community/DeepSeek-R1-Distill-Qwen-7B-GGUF (4.68 GB, Q4_K_M quantization, qwen2 architecture)  # noqa: E501

        :return: The model of this LangChainRequest.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this LangChainRequest.

        DeepSeek model identifier for local deployment of lmstudio-community/DeepSeek-R1-Distill-Qwen-7B-GGUF (4.68 GB, Q4_K_M quantization, qwen2 architecture)  # noqa: E501

        :param model: The model of this LangChainRequest.
        :type model: str
        """
        allowed_values = ["deepseek-r1-distill-qwen-7b"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def temperature(self) -> float:
        """Gets the temperature of this LangChainRequest.

        Control randomness of outputs (0=deterministic, 1=creative)  # noqa: E501

        :return: The temperature of this LangChainRequest.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this LangChainRequest.

        Control randomness of outputs (0=deterministic, 1=creative)  # noqa: E501

        :param temperature: The temperature of this LangChainRequest.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def options(self) -> object:
        """Gets the options of this LangChainRequest.

        Additional options for generating insights  # noqa: E501

        :return: The options of this LangChainRequest.
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options: object):
        """Sets the options of this LangChainRequest.

        Additional options for generating insights  # noqa: E501

        :param options: The options of this LangChainRequest.
        :type options: object
        """

        self._options = options
