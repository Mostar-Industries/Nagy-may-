# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.geo_coordinate import GeoCoordinate  # noqa: F401,E501
from swagger_server import util


class ApinotificationssubscribeRegion(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, center: GeoCoordinate=None, radius_km: float=None):  # noqa: E501
        """ApinotificationssubscribeRegion - a model defined in Swagger

        :param center: The center of this ApinotificationssubscribeRegion.  # noqa: E501
        :type center: GeoCoordinate
        :param radius_km: The radius_km of this ApinotificationssubscribeRegion.  # noqa: E501
        :type radius_km: float
        """
        self.swagger_types = {
            'center': GeoCoordinate,
            'radius_km': float
        }

        self.attribute_map = {
            'center': 'center',
            'radius_km': 'radius_km'
        }
        self._center = center
        self._radius_km = radius_km

    @classmethod
    def from_dict(cls, dikt) -> 'ApinotificationssubscribeRegion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apinotificationssubscribe_region of this ApinotificationssubscribeRegion.  # noqa: E501
        :rtype: ApinotificationssubscribeRegion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def center(self) -> GeoCoordinate:
        """Gets the center of this ApinotificationssubscribeRegion.


        :return: The center of this ApinotificationssubscribeRegion.
        :rtype: GeoCoordinate
        """
        return self._center

    @center.setter
    def center(self, center: GeoCoordinate):
        """Sets the center of this ApinotificationssubscribeRegion.


        :param center: The center of this ApinotificationssubscribeRegion.
        :type center: GeoCoordinate
        """

        self._center = center

    @property
    def radius_km(self) -> float:
        """Gets the radius_km of this ApinotificationssubscribeRegion.


        :return: The radius_km of this ApinotificationssubscribeRegion.
        :rtype: float
        """
        return self._radius_km

    @radius_km.setter
    def radius_km(self, radius_km: float):
        """Sets the radius_km of this ApinotificationssubscribeRegion.


        :param radius_km: The radius_km of this ApinotificationssubscribeRegion.
        :type radius_km: float
        """

        self._radius_km = radius_km
