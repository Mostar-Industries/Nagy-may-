# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class HabitatAnalysisResponseRiskFactors(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, factor_type: str=None, impact_score: float=None):  # noqa: E501
        """HabitatAnalysisResponseRiskFactors - a model defined in Swagger

        :param factor_type: The factor_type of this HabitatAnalysisResponseRiskFactors.  # noqa: E501
        :type factor_type: str
        :param impact_score: The impact_score of this HabitatAnalysisResponseRiskFactors.  # noqa: E501
        :type impact_score: float
        """
        self.swagger_types = {
            'factor_type': str,
            'impact_score': float
        }

        self.attribute_map = {
            'factor_type': 'factor_type',
            'impact_score': 'impact_score'
        }
        self._factor_type = factor_type
        self._impact_score = impact_score

    @classmethod
    def from_dict(cls, dikt) -> 'HabitatAnalysisResponseRiskFactors':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HabitatAnalysisResponse_risk_factors of this HabitatAnalysisResponseRiskFactors.  # noqa: E501
        :rtype: HabitatAnalysisResponseRiskFactors
        """
        return util.deserialize_model(dikt, cls)

    @property
    def factor_type(self) -> str:
        """Gets the factor_type of this HabitatAnalysisResponseRiskFactors.


        :return: The factor_type of this HabitatAnalysisResponseRiskFactors.
        :rtype: str
        """
        return self._factor_type

    @factor_type.setter
    def factor_type(self, factor_type: str):
        """Sets the factor_type of this HabitatAnalysisResponseRiskFactors.


        :param factor_type: The factor_type of this HabitatAnalysisResponseRiskFactors.
        :type factor_type: str
        """
        allowed_values = ["climate", "human_activity", "predator_presence"]  # noqa: E501
        if factor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `factor_type` ({0}), must be one of {1}"
                .format(factor_type, allowed_values)
            )

        self._factor_type = factor_type

    @property
    def impact_score(self) -> float:
        """Gets the impact_score of this HabitatAnalysisResponseRiskFactors.

        Impact on habitat suitability (0-100)  # noqa: E501

        :return: The impact_score of this HabitatAnalysisResponseRiskFactors.
        :rtype: float
        """
        return self._impact_score

    @impact_score.setter
    def impact_score(self, impact_score: float):
        """Sets the impact_score of this HabitatAnalysisResponseRiskFactors.

        Impact on habitat suitability (0-100)  # noqa: E501

        :param impact_score: The impact_score of this HabitatAnalysisResponseRiskFactors.
        :type impact_score: float
        """

        self._impact_score = impact_score
