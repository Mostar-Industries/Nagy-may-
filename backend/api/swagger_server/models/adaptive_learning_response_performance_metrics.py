# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AdaptiveLearningResponsePerformanceMetrics(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, accuracy: float=None, precision: float=None, recall: float=None, f1_score: float=None):  # noqa: E501
        """AdaptiveLearningResponsePerformanceMetrics - a model defined in Swagger

        :param accuracy: The accuracy of this AdaptiveLearningResponsePerformanceMetrics.  # noqa: E501
        :type accuracy: float
        :param precision: The precision of this AdaptiveLearningResponsePerformanceMetrics.  # noqa: E501
        :type precision: float
        :param recall: The recall of this AdaptiveLearningResponsePerformanceMetrics.  # noqa: E501
        :type recall: float
        :param f1_score: The f1_score of this AdaptiveLearningResponsePerformanceMetrics.  # noqa: E501
        :type f1_score: float
        """
        self.swagger_types = {
            'accuracy': float,
            'precision': float,
            'recall': float,
            'f1_score': float
        }

        self.attribute_map = {
            'accuracy': 'accuracy',
            'precision': 'precision',
            'recall': 'recall',
            'f1_score': 'f1_score'
        }
        self._accuracy = accuracy
        self._precision = precision
        self._recall = recall
        self._f1_score = f1_score

    @classmethod
    def from_dict(cls, dikt) -> 'AdaptiveLearningResponsePerformanceMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdaptiveLearningResponse_performance_metrics of this AdaptiveLearningResponsePerformanceMetrics.  # noqa: E501
        :rtype: AdaptiveLearningResponsePerformanceMetrics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy(self) -> float:
        """Gets the accuracy of this AdaptiveLearningResponsePerformanceMetrics.


        :return: The accuracy of this AdaptiveLearningResponsePerformanceMetrics.
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy: float):
        """Sets the accuracy of this AdaptiveLearningResponsePerformanceMetrics.


        :param accuracy: The accuracy of this AdaptiveLearningResponsePerformanceMetrics.
        :type accuracy: float
        """

        self._accuracy = accuracy

    @property
    def precision(self) -> float:
        """Gets the precision of this AdaptiveLearningResponsePerformanceMetrics.


        :return: The precision of this AdaptiveLearningResponsePerformanceMetrics.
        :rtype: float
        """
        return self._precision

    @precision.setter
    def precision(self, precision: float):
        """Sets the precision of this AdaptiveLearningResponsePerformanceMetrics.


        :param precision: The precision of this AdaptiveLearningResponsePerformanceMetrics.
        :type precision: float
        """

        self._precision = precision

    @property
    def recall(self) -> float:
        """Gets the recall of this AdaptiveLearningResponsePerformanceMetrics.


        :return: The recall of this AdaptiveLearningResponsePerformanceMetrics.
        :rtype: float
        """
        return self._recall

    @recall.setter
    def recall(self, recall: float):
        """Sets the recall of this AdaptiveLearningResponsePerformanceMetrics.


        :param recall: The recall of this AdaptiveLearningResponsePerformanceMetrics.
        :type recall: float
        """

        self._recall = recall

    @property
    def f1_score(self) -> float:
        """Gets the f1_score of this AdaptiveLearningResponsePerformanceMetrics.


        :return: The f1_score of this AdaptiveLearningResponsePerformanceMetrics.
        :rtype: float
        """
        return self._f1_score

    @f1_score.setter
    def f1_score(self, f1_score: float):
        """Sets the f1_score of this AdaptiveLearningResponsePerformanceMetrics.


        :param f1_score: The f1_score of this AdaptiveLearningResponsePerformanceMetrics.
        :type f1_score: float
        """

        self._f1_score = f1_score
