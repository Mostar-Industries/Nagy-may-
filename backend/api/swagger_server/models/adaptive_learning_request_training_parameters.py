# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AdaptiveLearningRequestTrainingParameters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, learning_rate: float=None, epochs: int=None, batch_size: int=None, validation_split: float=None):  # noqa: E501
        """AdaptiveLearningRequestTrainingParameters - a model defined in Swagger

        :param learning_rate: The learning_rate of this AdaptiveLearningRequestTrainingParameters.  # noqa: E501
        :type learning_rate: float
        :param epochs: The epochs of this AdaptiveLearningRequestTrainingParameters.  # noqa: E501
        :type epochs: int
        :param batch_size: The batch_size of this AdaptiveLearningRequestTrainingParameters.  # noqa: E501
        :type batch_size: int
        :param validation_split: The validation_split of this AdaptiveLearningRequestTrainingParameters.  # noqa: E501
        :type validation_split: float
        """
        self.swagger_types = {
            'learning_rate': float,
            'epochs': int,
            'batch_size': int,
            'validation_split': float
        }

        self.attribute_map = {
            'learning_rate': 'learning_rate',
            'epochs': 'epochs',
            'batch_size': 'batch_size',
            'validation_split': 'validation_split'
        }
        self._learning_rate = learning_rate
        self._epochs = epochs
        self._batch_size = batch_size
        self._validation_split = validation_split

    @classmethod
    def from_dict(cls, dikt) -> 'AdaptiveLearningRequestTrainingParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdaptiveLearningRequest_training_parameters of this AdaptiveLearningRequestTrainingParameters.  # noqa: E501
        :rtype: AdaptiveLearningRequestTrainingParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def learning_rate(self) -> float:
        """Gets the learning_rate of this AdaptiveLearningRequestTrainingParameters.


        :return: The learning_rate of this AdaptiveLearningRequestTrainingParameters.
        :rtype: float
        """
        return self._learning_rate

    @learning_rate.setter
    def learning_rate(self, learning_rate: float):
        """Sets the learning_rate of this AdaptiveLearningRequestTrainingParameters.


        :param learning_rate: The learning_rate of this AdaptiveLearningRequestTrainingParameters.
        :type learning_rate: float
        """

        self._learning_rate = learning_rate

    @property
    def epochs(self) -> int:
        """Gets the epochs of this AdaptiveLearningRequestTrainingParameters.


        :return: The epochs of this AdaptiveLearningRequestTrainingParameters.
        :rtype: int
        """
        return self._epochs

    @epochs.setter
    def epochs(self, epochs: int):
        """Sets the epochs of this AdaptiveLearningRequestTrainingParameters.


        :param epochs: The epochs of this AdaptiveLearningRequestTrainingParameters.
        :type epochs: int
        """

        self._epochs = epochs

    @property
    def batch_size(self) -> int:
        """Gets the batch_size of this AdaptiveLearningRequestTrainingParameters.


        :return: The batch_size of this AdaptiveLearningRequestTrainingParameters.
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size: int):
        """Sets the batch_size of this AdaptiveLearningRequestTrainingParameters.


        :param batch_size: The batch_size of this AdaptiveLearningRequestTrainingParameters.
        :type batch_size: int
        """

        self._batch_size = batch_size

    @property
    def validation_split(self) -> float:
        """Gets the validation_split of this AdaptiveLearningRequestTrainingParameters.


        :return: The validation_split of this AdaptiveLearningRequestTrainingParameters.
        :rtype: float
        """
        return self._validation_split

    @validation_split.setter
    def validation_split(self, validation_split: float):
        """Sets the validation_split of this AdaptiveLearningRequestTrainingParameters.


        :param validation_split: The validation_split of this AdaptiveLearningRequestTrainingParameters.
        :type validation_split: float
        """

        self._validation_split = validation_split
