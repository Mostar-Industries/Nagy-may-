# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AdaptiveLearningResponseFeedbackLoopStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, is_active: bool=None, last_retraining: datetime=None, performance_trend: str=None):  # noqa: E501
        """AdaptiveLearningResponseFeedbackLoopStatus - a model defined in Swagger

        :param is_active: The is_active of this AdaptiveLearningResponseFeedbackLoopStatus.  # noqa: E501
        :type is_active: bool
        :param last_retraining: The last_retraining of this AdaptiveLearningResponseFeedbackLoopStatus.  # noqa: E501
        :type last_retraining: datetime
        :param performance_trend: The performance_trend of this AdaptiveLearningResponseFeedbackLoopStatus.  # noqa: E501
        :type performance_trend: str
        """
        self.swagger_types = {
            'is_active': bool,
            'last_retraining': datetime,
            'performance_trend': str
        }

        self.attribute_map = {
            'is_active': 'is_active',
            'last_retraining': 'last_retraining',
            'performance_trend': 'performance_trend'
        }
        self._is_active = is_active
        self._last_retraining = last_retraining
        self._performance_trend = performance_trend

    @classmethod
    def from_dict(cls, dikt) -> 'AdaptiveLearningResponseFeedbackLoopStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdaptiveLearningResponse_feedback_loop_status of this AdaptiveLearningResponseFeedbackLoopStatus.  # noqa: E501
        :rtype: AdaptiveLearningResponseFeedbackLoopStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this AdaptiveLearningResponseFeedbackLoopStatus.


        :return: The is_active of this AdaptiveLearningResponseFeedbackLoopStatus.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this AdaptiveLearningResponseFeedbackLoopStatus.


        :param is_active: The is_active of this AdaptiveLearningResponseFeedbackLoopStatus.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def last_retraining(self) -> datetime:
        """Gets the last_retraining of this AdaptiveLearningResponseFeedbackLoopStatus.


        :return: The last_retraining of this AdaptiveLearningResponseFeedbackLoopStatus.
        :rtype: datetime
        """
        return self._last_retraining

    @last_retraining.setter
    def last_retraining(self, last_retraining: datetime):
        """Sets the last_retraining of this AdaptiveLearningResponseFeedbackLoopStatus.


        :param last_retraining: The last_retraining of this AdaptiveLearningResponseFeedbackLoopStatus.
        :type last_retraining: datetime
        """

        self._last_retraining = last_retraining

    @property
    def performance_trend(self) -> str:
        """Gets the performance_trend of this AdaptiveLearningResponseFeedbackLoopStatus.


        :return: The performance_trend of this AdaptiveLearningResponseFeedbackLoopStatus.
        :rtype: str
        """
        return self._performance_trend

    @performance_trend.setter
    def performance_trend(self, performance_trend: str):
        """Sets the performance_trend of this AdaptiveLearningResponseFeedbackLoopStatus.


        :param performance_trend: The performance_trend of this AdaptiveLearningResponseFeedbackLoopStatus.
        :type performance_trend: str
        """
        allowed_values = ["improving", "stable", "declining"]  # noqa: E501
        if performance_trend not in allowed_values:
            raise ValueError(
                "Invalid value for `performance_trend` ({0}), must be one of {1}"
                .format(performance_trend, allowed_values)
            )

        self._performance_trend = performance_trend
