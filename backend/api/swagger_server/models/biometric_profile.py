# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.biometric_profile_behavioral_patterns import BiometricProfileBehavioralPatterns  # noqa: F401,E501
from swagger_server.models.biometric_profile_size_metrics import BiometricProfileSizeMetrics  # noqa: F401,E501
from swagger_server import util


class BiometricProfile(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, species_confidence: float=None, morphological_features: List[str]=None, size_metrics: BiometricProfileSizeMetrics=None, genetic_markers: List[str]=None, genomic_predictive_score: float=None, behavioral_patterns: BiometricProfileBehavioralPatterns=None):  # noqa: E501
        """BiometricProfile - a model defined in Swagger

        :param species_confidence: The species_confidence of this BiometricProfile.  # noqa: E501
        :type species_confidence: float
        :param morphological_features: The morphological_features of this BiometricProfile.  # noqa: E501
        :type morphological_features: List[str]
        :param size_metrics: The size_metrics of this BiometricProfile.  # noqa: E501
        :type size_metrics: BiometricProfileSizeMetrics
        :param genetic_markers: The genetic_markers of this BiometricProfile.  # noqa: E501
        :type genetic_markers: List[str]
        :param genomic_predictive_score: The genomic_predictive_score of this BiometricProfile.  # noqa: E501
        :type genomic_predictive_score: float
        :param behavioral_patterns: The behavioral_patterns of this BiometricProfile.  # noqa: E501
        :type behavioral_patterns: BiometricProfileBehavioralPatterns
        """
        self.swagger_types = {
            'species_confidence': float,
            'morphological_features': List[str],
            'size_metrics': BiometricProfileSizeMetrics,
            'genetic_markers': List[str],
            'genomic_predictive_score': float,
            'behavioral_patterns': BiometricProfileBehavioralPatterns
        }

        self.attribute_map = {
            'species_confidence': 'species_confidence',
            'morphological_features': 'morphological_features',
            'size_metrics': 'size_metrics',
            'genetic_markers': 'genetic_markers',
            'genomic_predictive_score': 'genomic_predictive_score',
            'behavioral_patterns': 'behavioral_patterns'
        }
        self._species_confidence = species_confidence
        self._morphological_features = morphological_features
        self._size_metrics = size_metrics
        self._genetic_markers = genetic_markers
        self._genomic_predictive_score = genomic_predictive_score
        self._behavioral_patterns = behavioral_patterns

    @classmethod
    def from_dict(cls, dikt) -> 'BiometricProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BiometricProfile of this BiometricProfile.  # noqa: E501
        :rtype: BiometricProfile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def species_confidence(self) -> float:
        """Gets the species_confidence of this BiometricProfile.

        Confidence that organism is Mastomys Natalensis (0-1)  # noqa: E501

        :return: The species_confidence of this BiometricProfile.
        :rtype: float
        """
        return self._species_confidence

    @species_confidence.setter
    def species_confidence(self, species_confidence: float):
        """Sets the species_confidence of this BiometricProfile.

        Confidence that organism is Mastomys Natalensis (0-1)  # noqa: E501

        :param species_confidence: The species_confidence of this BiometricProfile.
        :type species_confidence: float
        """

        self._species_confidence = species_confidence

    @property
    def morphological_features(self) -> List[str]:
        """Gets the morphological_features of this BiometricProfile.


        :return: The morphological_features of this BiometricProfile.
        :rtype: List[str]
        """
        return self._morphological_features

    @morphological_features.setter
    def morphological_features(self, morphological_features: List[str]):
        """Sets the morphological_features of this BiometricProfile.


        :param morphological_features: The morphological_features of this BiometricProfile.
        :type morphological_features: List[str]
        """

        self._morphological_features = morphological_features

    @property
    def size_metrics(self) -> BiometricProfileSizeMetrics:
        """Gets the size_metrics of this BiometricProfile.


        :return: The size_metrics of this BiometricProfile.
        :rtype: BiometricProfileSizeMetrics
        """
        return self._size_metrics

    @size_metrics.setter
    def size_metrics(self, size_metrics: BiometricProfileSizeMetrics):
        """Sets the size_metrics of this BiometricProfile.


        :param size_metrics: The size_metrics of this BiometricProfile.
        :type size_metrics: BiometricProfileSizeMetrics
        """

        self._size_metrics = size_metrics

    @property
    def genetic_markers(self) -> List[str]:
        """Gets the genetic_markers of this BiometricProfile.


        :return: The genetic_markers of this BiometricProfile.
        :rtype: List[str]
        """
        return self._genetic_markers

    @genetic_markers.setter
    def genetic_markers(self, genetic_markers: List[str]):
        """Sets the genetic_markers of this BiometricProfile.


        :param genetic_markers: The genetic_markers of this BiometricProfile.
        :type genetic_markers: List[str]
        """

        self._genetic_markers = genetic_markers

    @property
    def genomic_predictive_score(self) -> float:
        """Gets the genomic_predictive_score of this BiometricProfile.

        Predicted behavioral alignment from genetic markers (0-1)  # noqa: E501

        :return: The genomic_predictive_score of this BiometricProfile.
        :rtype: float
        """
        return self._genomic_predictive_score

    @genomic_predictive_score.setter
    def genomic_predictive_score(self, genomic_predictive_score: float):
        """Sets the genomic_predictive_score of this BiometricProfile.

        Predicted behavioral alignment from genetic markers (0-1)  # noqa: E501

        :param genomic_predictive_score: The genomic_predictive_score of this BiometricProfile.
        :type genomic_predictive_score: float
        """

        self._genomic_predictive_score = genomic_predictive_score

    @property
    def behavioral_patterns(self) -> BiometricProfileBehavioralPatterns:
        """Gets the behavioral_patterns of this BiometricProfile.


        :return: The behavioral_patterns of this BiometricProfile.
        :rtype: BiometricProfileBehavioralPatterns
        """
        return self._behavioral_patterns

    @behavioral_patterns.setter
    def behavioral_patterns(self, behavioral_patterns: BiometricProfileBehavioralPatterns):
        """Sets the behavioral_patterns of this BiometricProfile.


        :param behavioral_patterns: The behavioral_patterns of this BiometricProfile.
        :type behavioral_patterns: BiometricProfileBehavioralPatterns
        """

        self._behavioral_patterns = behavioral_patterns
