# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse200(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, analysis_id: str=None, analysis_type: str=None, trends: List[object]=None, seasonality: object=None, anomalies: List[object]=None, forecasts: List[object]=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger

        :param analysis_id: The analysis_id of this InlineResponse200.  # noqa: E501
        :type analysis_id: str
        :param analysis_type: The analysis_type of this InlineResponse200.  # noqa: E501
        :type analysis_type: str
        :param trends: The trends of this InlineResponse200.  # noqa: E501
        :type trends: List[object]
        :param seasonality: The seasonality of this InlineResponse200.  # noqa: E501
        :type seasonality: object
        :param anomalies: The anomalies of this InlineResponse200.  # noqa: E501
        :type anomalies: List[object]
        :param forecasts: The forecasts of this InlineResponse200.  # noqa: E501
        :type forecasts: List[object]
        """
        self.swagger_types = {
            'analysis_id': str,
            'analysis_type': str,
            'trends': List[object],
            'seasonality': object,
            'anomalies': List[object],
            'forecasts': List[object]
        }

        self.attribute_map = {
            'analysis_id': 'analysis_id',
            'analysis_type': 'analysis_type',
            'trends': 'trends',
            'seasonality': 'seasonality',
            'anomalies': 'anomalies',
            'forecasts': 'forecasts'
        }
        self._analysis_id = analysis_id
        self._analysis_type = analysis_type
        self._trends = trends
        self._seasonality = seasonality
        self._anomalies = anomalies
        self._forecasts = forecasts

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_id(self) -> str:
        """Gets the analysis_id of this InlineResponse200.


        :return: The analysis_id of this InlineResponse200.
        :rtype: str
        """
        return self._analysis_id

    @analysis_id.setter
    def analysis_id(self, analysis_id: str):
        """Sets the analysis_id of this InlineResponse200.


        :param analysis_id: The analysis_id of this InlineResponse200.
        :type analysis_id: str
        """

        self._analysis_id = analysis_id

    @property
    def analysis_type(self) -> str:
        """Gets the analysis_type of this InlineResponse200.


        :return: The analysis_type of this InlineResponse200.
        :rtype: str
        """
        return self._analysis_type

    @analysis_type.setter
    def analysis_type(self, analysis_type: str):
        """Sets the analysis_type of this InlineResponse200.


        :param analysis_type: The analysis_type of this InlineResponse200.
        :type analysis_type: str
        """

        self._analysis_type = analysis_type

    @property
    def trends(self) -> List[object]:
        """Gets the trends of this InlineResponse200.


        :return: The trends of this InlineResponse200.
        :rtype: List[object]
        """
        return self._trends

    @trends.setter
    def trends(self, trends: List[object]):
        """Sets the trends of this InlineResponse200.


        :param trends: The trends of this InlineResponse200.
        :type trends: List[object]
        """

        self._trends = trends

    @property
    def seasonality(self) -> object:
        """Gets the seasonality of this InlineResponse200.


        :return: The seasonality of this InlineResponse200.
        :rtype: object
        """
        return self._seasonality

    @seasonality.setter
    def seasonality(self, seasonality: object):
        """Sets the seasonality of this InlineResponse200.


        :param seasonality: The seasonality of this InlineResponse200.
        :type seasonality: object
        """

        self._seasonality = seasonality

    @property
    def anomalies(self) -> List[object]:
        """Gets the anomalies of this InlineResponse200.


        :return: The anomalies of this InlineResponse200.
        :rtype: List[object]
        """
        return self._anomalies

    @anomalies.setter
    def anomalies(self, anomalies: List[object]):
        """Sets the anomalies of this InlineResponse200.


        :param anomalies: The anomalies of this InlineResponse200.
        :type anomalies: List[object]
        """

        self._anomalies = anomalies

    @property
    def forecasts(self) -> List[object]:
        """Gets the forecasts of this InlineResponse200.


        :return: The forecasts of this InlineResponse200.
        :rtype: List[object]
        """
        return self._forecasts

    @forecasts.setter
    def forecasts(self, forecasts: List[object]):
        """Sets the forecasts of this InlineResponse200.


        :param forecasts: The forecasts of this InlineResponse200.
        :type forecasts: List[object]
        """

        self._forecasts = forecasts
