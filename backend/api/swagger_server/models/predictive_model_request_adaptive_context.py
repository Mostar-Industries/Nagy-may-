# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PredictiveModelRequestAdaptiveContext(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, region_bias_profile: str=None, seasonality_override: bool=None, trend_tuning_factor: float=None):  # noqa: E501
        """PredictiveModelRequestAdaptiveContext - a model defined in Swagger

        :param region_bias_profile: The region_bias_profile of this PredictiveModelRequestAdaptiveContext.  # noqa: E501
        :type region_bias_profile: str
        :param seasonality_override: The seasonality_override of this PredictiveModelRequestAdaptiveContext.  # noqa: E501
        :type seasonality_override: bool
        :param trend_tuning_factor: The trend_tuning_factor of this PredictiveModelRequestAdaptiveContext.  # noqa: E501
        :type trend_tuning_factor: float
        """
        self.swagger_types = {
            'region_bias_profile': str,
            'seasonality_override': bool,
            'trend_tuning_factor': float
        }

        self.attribute_map = {
            'region_bias_profile': 'region_bias_profile',
            'seasonality_override': 'seasonality_override',
            'trend_tuning_factor': 'trend_tuning_factor'
        }
        self._region_bias_profile = region_bias_profile
        self._seasonality_override = seasonality_override
        self._trend_tuning_factor = trend_tuning_factor

    @classmethod
    def from_dict(cls, dikt) -> 'PredictiveModelRequestAdaptiveContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PredictiveModelRequest_adaptive_context of this PredictiveModelRequestAdaptiveContext.  # noqa: E501
        :rtype: PredictiveModelRequestAdaptiveContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region_bias_profile(self) -> str:
        """Gets the region_bias_profile of this PredictiveModelRequestAdaptiveContext.

        Learned bias profiles for regions (e.g., rainfall + altitude patterns)  # noqa: E501

        :return: The region_bias_profile of this PredictiveModelRequestAdaptiveContext.
        :rtype: str
        """
        return self._region_bias_profile

    @region_bias_profile.setter
    def region_bias_profile(self, region_bias_profile: str):
        """Sets the region_bias_profile of this PredictiveModelRequestAdaptiveContext.

        Learned bias profiles for regions (e.g., rainfall + altitude patterns)  # noqa: E501

        :param region_bias_profile: The region_bias_profile of this PredictiveModelRequestAdaptiveContext.
        :type region_bias_profile: str
        """

        self._region_bias_profile = region_bias_profile

    @property
    def seasonality_override(self) -> bool:
        """Gets the seasonality_override of this PredictiveModelRequestAdaptiveContext.

        If true, reweights seasonal baselines using real-time anomalies  # noqa: E501

        :return: The seasonality_override of this PredictiveModelRequestAdaptiveContext.
        :rtype: bool
        """
        return self._seasonality_override

    @seasonality_override.setter
    def seasonality_override(self, seasonality_override: bool):
        """Sets the seasonality_override of this PredictiveModelRequestAdaptiveContext.

        If true, reweights seasonal baselines using real-time anomalies  # noqa: E501

        :param seasonality_override: The seasonality_override of this PredictiveModelRequestAdaptiveContext.
        :type seasonality_override: bool
        """

        self._seasonality_override = seasonality_override

    @property
    def trend_tuning_factor(self) -> float:
        """Gets the trend_tuning_factor of this PredictiveModelRequestAdaptiveContext.

        Adjusts the learning rate in response to observed trends  # noqa: E501

        :return: The trend_tuning_factor of this PredictiveModelRequestAdaptiveContext.
        :rtype: float
        """
        return self._trend_tuning_factor

    @trend_tuning_factor.setter
    def trend_tuning_factor(self, trend_tuning_factor: float):
        """Sets the trend_tuning_factor of this PredictiveModelRequestAdaptiveContext.

        Adjusts the learning rate in response to observed trends  # noqa: E501

        :param trend_tuning_factor: The trend_tuning_factor of this PredictiveModelRequestAdaptiveContext.
        :type trend_tuning_factor: float
        """

        self._trend_tuning_factor = trend_tuning_factor
