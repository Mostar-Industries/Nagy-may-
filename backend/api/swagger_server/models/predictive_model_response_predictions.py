# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.habitat_analysis_request_geographic_coordinates import HabitatAnalysisRequestGeographicCoordinates  # noqa: F401,E501
from swagger_server.models.predictive_model_response_confidence_explanation import PredictiveModelResponseConfidenceExplanation  # noqa: F401,E501
from swagger_server import util


class PredictiveModelResponsePredictions(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, location: HabitatAnalysisRequestGeographicCoordinates=None, suitability_score: float=None, forecast_data: object=None, confidence_explanation: PredictiveModelResponseConfidenceExplanation=None):  # noqa: E501
        """PredictiveModelResponsePredictions - a model defined in Swagger

        :param location: The location of this PredictiveModelResponsePredictions.  # noqa: E501
        :type location: HabitatAnalysisRequestGeographicCoordinates
        :param suitability_score: The suitability_score of this PredictiveModelResponsePredictions.  # noqa: E501
        :type suitability_score: float
        :param forecast_data: The forecast_data of this PredictiveModelResponsePredictions.  # noqa: E501
        :type forecast_data: object
        :param confidence_explanation: The confidence_explanation of this PredictiveModelResponsePredictions.  # noqa: E501
        :type confidence_explanation: PredictiveModelResponseConfidenceExplanation
        """
        self.swagger_types = {
            'location': HabitatAnalysisRequestGeographicCoordinates,
            'suitability_score': float,
            'forecast_data': object,
            'confidence_explanation': PredictiveModelResponseConfidenceExplanation
        }

        self.attribute_map = {
            'location': 'location',
            'suitability_score': 'suitability_score',
            'forecast_data': 'forecast_data',
            'confidence_explanation': 'confidence_explanation'
        }
        self._location = location
        self._suitability_score = suitability_score
        self._forecast_data = forecast_data
        self._confidence_explanation = confidence_explanation

    @classmethod
    def from_dict(cls, dikt) -> 'PredictiveModelResponsePredictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PredictiveModelResponse_predictions of this PredictiveModelResponsePredictions.  # noqa: E501
        :rtype: PredictiveModelResponsePredictions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self) -> HabitatAnalysisRequestGeographicCoordinates:
        """Gets the location of this PredictiveModelResponsePredictions.


        :return: The location of this PredictiveModelResponsePredictions.
        :rtype: HabitatAnalysisRequestGeographicCoordinates
        """
        return self._location

    @location.setter
    def location(self, location: HabitatAnalysisRequestGeographicCoordinates):
        """Sets the location of this PredictiveModelResponsePredictions.


        :param location: The location of this PredictiveModelResponsePredictions.
        :type location: HabitatAnalysisRequestGeographicCoordinates
        """

        self._location = location

    @property
    def suitability_score(self) -> float:
        """Gets the suitability_score of this PredictiveModelResponsePredictions.


        :return: The suitability_score of this PredictiveModelResponsePredictions.
        :rtype: float
        """
        return self._suitability_score

    @suitability_score.setter
    def suitability_score(self, suitability_score: float):
        """Sets the suitability_score of this PredictiveModelResponsePredictions.


        :param suitability_score: The suitability_score of this PredictiveModelResponsePredictions.
        :type suitability_score: float
        """

        self._suitability_score = suitability_score

    @property
    def forecast_data(self) -> object:
        """Gets the forecast_data of this PredictiveModelResponsePredictions.


        :return: The forecast_data of this PredictiveModelResponsePredictions.
        :rtype: object
        """
        return self._forecast_data

    @forecast_data.setter
    def forecast_data(self, forecast_data: object):
        """Sets the forecast_data of this PredictiveModelResponsePredictions.


        :param forecast_data: The forecast_data of this PredictiveModelResponsePredictions.
        :type forecast_data: object
        """

        self._forecast_data = forecast_data

    @property
    def confidence_explanation(self) -> PredictiveModelResponseConfidenceExplanation:
        """Gets the confidence_explanation of this PredictiveModelResponsePredictions.


        :return: The confidence_explanation of this PredictiveModelResponsePredictions.
        :rtype: PredictiveModelResponseConfidenceExplanation
        """
        return self._confidence_explanation

    @confidence_explanation.setter
    def confidence_explanation(self, confidence_explanation: PredictiveModelResponseConfidenceExplanation):
        """Sets the confidence_explanation of this PredictiveModelResponsePredictions.


        :param confidence_explanation: The confidence_explanation of this PredictiveModelResponsePredictions.
        :type confidence_explanation: PredictiveModelResponseConfidenceExplanation
        """

        self._confidence_explanation = confidence_explanation
