# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VisionAnalyzeResponseExtractedFeatures(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ndvi_index: float=None, water_body_ratio: float=None, land_classification: List[str]=None):  # noqa: E501
        """VisionAnalyzeResponseExtractedFeatures - a model defined in Swagger

        :param ndvi_index: The ndvi_index of this VisionAnalyzeResponseExtractedFeatures.  # noqa: E501
        :type ndvi_index: float
        :param water_body_ratio: The water_body_ratio of this VisionAnalyzeResponseExtractedFeatures.  # noqa: E501
        :type water_body_ratio: float
        :param land_classification: The land_classification of this VisionAnalyzeResponseExtractedFeatures.  # noqa: E501
        :type land_classification: List[str]
        """
        self.swagger_types = {
            'ndvi_index': float,
            'water_body_ratio': float,
            'land_classification': List[str]
        }

        self.attribute_map = {
            'ndvi_index': 'ndvi_index',
            'water_body_ratio': 'water_body_ratio',
            'land_classification': 'land_classification'
        }
        self._ndvi_index = ndvi_index
        self._water_body_ratio = water_body_ratio
        self._land_classification = land_classification

    @classmethod
    def from_dict(cls, dikt) -> 'VisionAnalyzeResponseExtractedFeatures':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VisionAnalyzeResponse_extracted_features of this VisionAnalyzeResponseExtractedFeatures.  # noqa: E501
        :rtype: VisionAnalyzeResponseExtractedFeatures
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ndvi_index(self) -> float:
        """Gets the ndvi_index of this VisionAnalyzeResponseExtractedFeatures.


        :return: The ndvi_index of this VisionAnalyzeResponseExtractedFeatures.
        :rtype: float
        """
        return self._ndvi_index

    @ndvi_index.setter
    def ndvi_index(self, ndvi_index: float):
        """Sets the ndvi_index of this VisionAnalyzeResponseExtractedFeatures.


        :param ndvi_index: The ndvi_index of this VisionAnalyzeResponseExtractedFeatures.
        :type ndvi_index: float
        """

        self._ndvi_index = ndvi_index

    @property
    def water_body_ratio(self) -> float:
        """Gets the water_body_ratio of this VisionAnalyzeResponseExtractedFeatures.


        :return: The water_body_ratio of this VisionAnalyzeResponseExtractedFeatures.
        :rtype: float
        """
        return self._water_body_ratio

    @water_body_ratio.setter
    def water_body_ratio(self, water_body_ratio: float):
        """Sets the water_body_ratio of this VisionAnalyzeResponseExtractedFeatures.


        :param water_body_ratio: The water_body_ratio of this VisionAnalyzeResponseExtractedFeatures.
        :type water_body_ratio: float
        """

        self._water_body_ratio = water_body_ratio

    @property
    def land_classification(self) -> List[str]:
        """Gets the land_classification of this VisionAnalyzeResponseExtractedFeatures.


        :return: The land_classification of this VisionAnalyzeResponseExtractedFeatures.
        :rtype: List[str]
        """
        return self._land_classification

    @land_classification.setter
    def land_classification(self, land_classification: List[str]):
        """Sets the land_classification of this VisionAnalyzeResponseExtractedFeatures.


        :param land_classification: The land_classification of this VisionAnalyzeResponseExtractedFeatures.
        :type land_classification: List[str]
        """

        self._land_classification = land_classification
