# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BiometricProfileBehavioralPatterns(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, activity_level: str=None, movement_pattern: str=None, foraging_behavior: str=None):  # noqa: E501
        """BiometricProfileBehavioralPatterns - a model defined in Swagger

        :param activity_level: The activity_level of this BiometricProfileBehavioralPatterns.  # noqa: E501
        :type activity_level: str
        :param movement_pattern: The movement_pattern of this BiometricProfileBehavioralPatterns.  # noqa: E501
        :type movement_pattern: str
        :param foraging_behavior: The foraging_behavior of this BiometricProfileBehavioralPatterns.  # noqa: E501
        :type foraging_behavior: str
        """
        self.swagger_types = {
            'activity_level': str,
            'movement_pattern': str,
            'foraging_behavior': str
        }

        self.attribute_map = {
            'activity_level': 'activity_level',
            'movement_pattern': 'movement_pattern',
            'foraging_behavior': 'foraging_behavior'
        }
        self._activity_level = activity_level
        self._movement_pattern = movement_pattern
        self._foraging_behavior = foraging_behavior

    @classmethod
    def from_dict(cls, dikt) -> 'BiometricProfileBehavioralPatterns':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BiometricProfile_behavioral_patterns of this BiometricProfileBehavioralPatterns.  # noqa: E501
        :rtype: BiometricProfileBehavioralPatterns
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_level(self) -> str:
        """Gets the activity_level of this BiometricProfileBehavioralPatterns.


        :return: The activity_level of this BiometricProfileBehavioralPatterns.
        :rtype: str
        """
        return self._activity_level

    @activity_level.setter
    def activity_level(self, activity_level: str):
        """Sets the activity_level of this BiometricProfileBehavioralPatterns.


        :param activity_level: The activity_level of this BiometricProfileBehavioralPatterns.
        :type activity_level: str
        """
        allowed_values = ["low", "medium", "high"]  # noqa: E501
        if activity_level not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_level` ({0}), must be one of {1}"
                .format(activity_level, allowed_values)
            )

        self._activity_level = activity_level

    @property
    def movement_pattern(self) -> str:
        """Gets the movement_pattern of this BiometricProfileBehavioralPatterns.


        :return: The movement_pattern of this BiometricProfileBehavioralPatterns.
        :rtype: str
        """
        return self._movement_pattern

    @movement_pattern.setter
    def movement_pattern(self, movement_pattern: str):
        """Sets the movement_pattern of this BiometricProfileBehavioralPatterns.


        :param movement_pattern: The movement_pattern of this BiometricProfileBehavioralPatterns.
        :type movement_pattern: str
        """
        allowed_values = ["linear", "erratic", "circular"]  # noqa: E501
        if movement_pattern not in allowed_values:
            raise ValueError(
                "Invalid value for `movement_pattern` ({0}), must be one of {1}"
                .format(movement_pattern, allowed_values)
            )

        self._movement_pattern = movement_pattern

    @property
    def foraging_behavior(self) -> str:
        """Gets the foraging_behavior of this BiometricProfileBehavioralPatterns.


        :return: The foraging_behavior of this BiometricProfileBehavioralPatterns.
        :rtype: str
        """
        return self._foraging_behavior

    @foraging_behavior.setter
    def foraging_behavior(self, foraging_behavior: str):
        """Sets the foraging_behavior of this BiometricProfileBehavioralPatterns.


        :param foraging_behavior: The foraging_behavior of this BiometricProfileBehavioralPatterns.
        :type foraging_behavior: str
        """
        allowed_values = ["solo", "group", "opportunistic"]  # noqa: E501
        if foraging_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `foraging_behavior` ({0}), must be one of {1}"
                .format(foraging_behavior, allowed_values)
            )

        self._foraging_behavior = foraging_behavior
