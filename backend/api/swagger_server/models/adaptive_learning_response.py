# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.adaptive_learning_response_feedback_loop_status import AdaptiveLearningResponseFeedbackLoopStatus  # noqa: F401,E501
from swagger_server.models.adaptive_learning_response_performance_metrics import AdaptiveLearningResponsePerformanceMetrics  # noqa: F401,E501
from swagger_server import util


class AdaptiveLearningResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, message: str=None, model_id: str=None, training_status: str=None, performance_metrics: AdaptiveLearningResponsePerformanceMetrics=None, feedback_loop_status: AdaptiveLearningResponseFeedbackLoopStatus=None):  # noqa: E501
        """AdaptiveLearningResponse - a model defined in Swagger

        :param message: The message of this AdaptiveLearningResponse.  # noqa: E501
        :type message: str
        :param model_id: The model_id of this AdaptiveLearningResponse.  # noqa: E501
        :type model_id: str
        :param training_status: The training_status of this AdaptiveLearningResponse.  # noqa: E501
        :type training_status: str
        :param performance_metrics: The performance_metrics of this AdaptiveLearningResponse.  # noqa: E501
        :type performance_metrics: AdaptiveLearningResponsePerformanceMetrics
        :param feedback_loop_status: The feedback_loop_status of this AdaptiveLearningResponse.  # noqa: E501
        :type feedback_loop_status: AdaptiveLearningResponseFeedbackLoopStatus
        """
        self.swagger_types = {
            'message': str,
            'model_id': str,
            'training_status': str,
            'performance_metrics': AdaptiveLearningResponsePerformanceMetrics,
            'feedback_loop_status': AdaptiveLearningResponseFeedbackLoopStatus
        }

        self.attribute_map = {
            'message': 'message',
            'model_id': 'model_id',
            'training_status': 'training_status',
            'performance_metrics': 'performance_metrics',
            'feedback_loop_status': 'feedback_loop_status'
        }
        self._message = message
        self._model_id = model_id
        self._training_status = training_status
        self._performance_metrics = performance_metrics
        self._feedback_loop_status = feedback_loop_status

    @classmethod
    def from_dict(cls, dikt) -> 'AdaptiveLearningResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdaptiveLearningResponse of this AdaptiveLearningResponse.  # noqa: E501
        :rtype: AdaptiveLearningResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self) -> str:
        """Gets the message of this AdaptiveLearningResponse.


        :return: The message of this AdaptiveLearningResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this AdaptiveLearningResponse.


        :param message: The message of this AdaptiveLearningResponse.
        :type message: str
        """

        self._message = message

    @property
    def model_id(self) -> str:
        """Gets the model_id of this AdaptiveLearningResponse.


        :return: The model_id of this AdaptiveLearningResponse.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: str):
        """Sets the model_id of this AdaptiveLearningResponse.


        :param model_id: The model_id of this AdaptiveLearningResponse.
        :type model_id: str
        """

        self._model_id = model_id

    @property
    def training_status(self) -> str:
        """Gets the training_status of this AdaptiveLearningResponse.


        :return: The training_status of this AdaptiveLearningResponse.
        :rtype: str
        """
        return self._training_status

    @training_status.setter
    def training_status(self, training_status: str):
        """Sets the training_status of this AdaptiveLearningResponse.


        :param training_status: The training_status of this AdaptiveLearningResponse.
        :type training_status: str
        """
        allowed_values = ["pending", "in_progress", "completed", "failed"]  # noqa: E501
        if training_status not in allowed_values:
            raise ValueError(
                "Invalid value for `training_status` ({0}), must be one of {1}"
                .format(training_status, allowed_values)
            )

        self._training_status = training_status

    @property
    def performance_metrics(self) -> AdaptiveLearningResponsePerformanceMetrics:
        """Gets the performance_metrics of this AdaptiveLearningResponse.


        :return: The performance_metrics of this AdaptiveLearningResponse.
        :rtype: AdaptiveLearningResponsePerformanceMetrics
        """
        return self._performance_metrics

    @performance_metrics.setter
    def performance_metrics(self, performance_metrics: AdaptiveLearningResponsePerformanceMetrics):
        """Sets the performance_metrics of this AdaptiveLearningResponse.


        :param performance_metrics: The performance_metrics of this AdaptiveLearningResponse.
        :type performance_metrics: AdaptiveLearningResponsePerformanceMetrics
        """

        self._performance_metrics = performance_metrics

    @property
    def feedback_loop_status(self) -> AdaptiveLearningResponseFeedbackLoopStatus:
        """Gets the feedback_loop_status of this AdaptiveLearningResponse.


        :return: The feedback_loop_status of this AdaptiveLearningResponse.
        :rtype: AdaptiveLearningResponseFeedbackLoopStatus
        """
        return self._feedback_loop_status

    @feedback_loop_status.setter
    def feedback_loop_status(self, feedback_loop_status: AdaptiveLearningResponseFeedbackLoopStatus):
        """Sets the feedback_loop_status of this AdaptiveLearningResponse.


        :param feedback_loop_status: The feedback_loop_status of this AdaptiveLearningResponse.
        :type feedback_loop_status: AdaptiveLearningResponseFeedbackLoopStatus
        """

        self._feedback_loop_status = feedback_loop_status
