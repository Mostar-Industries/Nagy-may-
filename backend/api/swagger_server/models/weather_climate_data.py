# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.weather_climate_data_climate_trends import WeatherClimateDataClimateTrends  # noqa: F401,E501
from swagger_server.models.weather_climate_data_precipitation_data import WeatherClimateDataPrecipitationData  # noqa: F401,E501
from swagger_server.models.weather_climate_data_temperature_data import WeatherClimateDataTemperatureData  # noqa: F401,E501
from swagger_server import util


class WeatherClimateData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, temperature_data: List[WeatherClimateDataTemperatureData]=None, precipitation_data: List[WeatherClimateDataPrecipitationData]=None, rainfall_anomaly: float=None, climate_trends: WeatherClimateDataClimateTrends=None):  # noqa: E501
        """WeatherClimateData - a model defined in Swagger

        :param temperature_data: The temperature_data of this WeatherClimateData.  # noqa: E501
        :type temperature_data: List[WeatherClimateDataTemperatureData]
        :param precipitation_data: The precipitation_data of this WeatherClimateData.  # noqa: E501
        :type precipitation_data: List[WeatherClimateDataPrecipitationData]
        :param rainfall_anomaly: The rainfall_anomaly of this WeatherClimateData.  # noqa: E501
        :type rainfall_anomaly: float
        :param climate_trends: The climate_trends of this WeatherClimateData.  # noqa: E501
        :type climate_trends: WeatherClimateDataClimateTrends
        """
        self.swagger_types = {
            'temperature_data': List[WeatherClimateDataTemperatureData],
            'precipitation_data': List[WeatherClimateDataPrecipitationData],
            'rainfall_anomaly': float,
            'climate_trends': WeatherClimateDataClimateTrends
        }

        self.attribute_map = {
            'temperature_data': 'temperature_data',
            'precipitation_data': 'precipitation_data',
            'rainfall_anomaly': 'rainfall_anomaly',
            'climate_trends': 'climate_trends'
        }
        self._temperature_data = temperature_data
        self._precipitation_data = precipitation_data
        self._rainfall_anomaly = rainfall_anomaly
        self._climate_trends = climate_trends

    @classmethod
    def from_dict(cls, dikt) -> 'WeatherClimateData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WeatherClimateData of this WeatherClimateData.  # noqa: E501
        :rtype: WeatherClimateData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def temperature_data(self) -> List[WeatherClimateDataTemperatureData]:
        """Gets the temperature_data of this WeatherClimateData.


        :return: The temperature_data of this WeatherClimateData.
        :rtype: List[WeatherClimateDataTemperatureData]
        """
        return self._temperature_data

    @temperature_data.setter
    def temperature_data(self, temperature_data: List[WeatherClimateDataTemperatureData]):
        """Sets the temperature_data of this WeatherClimateData.


        :param temperature_data: The temperature_data of this WeatherClimateData.
        :type temperature_data: List[WeatherClimateDataTemperatureData]
        """

        self._temperature_data = temperature_data

    @property
    def precipitation_data(self) -> List[WeatherClimateDataPrecipitationData]:
        """Gets the precipitation_data of this WeatherClimateData.


        :return: The precipitation_data of this WeatherClimateData.
        :rtype: List[WeatherClimateDataPrecipitationData]
        """
        return self._precipitation_data

    @precipitation_data.setter
    def precipitation_data(self, precipitation_data: List[WeatherClimateDataPrecipitationData]):
        """Sets the precipitation_data of this WeatherClimateData.


        :param precipitation_data: The precipitation_data of this WeatherClimateData.
        :type precipitation_data: List[WeatherClimateDataPrecipitationData]
        """

        self._precipitation_data = precipitation_data

    @property
    def rainfall_anomaly(self) -> float:
        """Gets the rainfall_anomaly of this WeatherClimateData.

        Deviation from historical average  # noqa: E501

        :return: The rainfall_anomaly of this WeatherClimateData.
        :rtype: float
        """
        return self._rainfall_anomaly

    @rainfall_anomaly.setter
    def rainfall_anomaly(self, rainfall_anomaly: float):
        """Sets the rainfall_anomaly of this WeatherClimateData.

        Deviation from historical average  # noqa: E501

        :param rainfall_anomaly: The rainfall_anomaly of this WeatherClimateData.
        :type rainfall_anomaly: float
        """

        self._rainfall_anomaly = rainfall_anomaly

    @property
    def climate_trends(self) -> WeatherClimateDataClimateTrends:
        """Gets the climate_trends of this WeatherClimateData.


        :return: The climate_trends of this WeatherClimateData.
        :rtype: WeatherClimateDataClimateTrends
        """
        return self._climate_trends

    @climate_trends.setter
    def climate_trends(self, climate_trends: WeatherClimateDataClimateTrends):
        """Sets the climate_trends of this WeatherClimateData.


        :param climate_trends: The climate_trends of this WeatherClimateData.
        :type climate_trends: WeatherClimateDataClimateTrends
        """

        self._climate_trends = climate_trends
