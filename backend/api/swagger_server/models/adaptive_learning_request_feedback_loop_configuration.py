# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AdaptiveLearningRequestFeedbackLoopConfiguration(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, enable_auto_retraining: bool=None, performance_threshold: float=None, feedback_collection_period: str=None):  # noqa: E501
        """AdaptiveLearningRequestFeedbackLoopConfiguration - a model defined in Swagger

        :param enable_auto_retraining: The enable_auto_retraining of this AdaptiveLearningRequestFeedbackLoopConfiguration.  # noqa: E501
        :type enable_auto_retraining: bool
        :param performance_threshold: The performance_threshold of this AdaptiveLearningRequestFeedbackLoopConfiguration.  # noqa: E501
        :type performance_threshold: float
        :param feedback_collection_period: The feedback_collection_period of this AdaptiveLearningRequestFeedbackLoopConfiguration.  # noqa: E501
        :type feedback_collection_period: str
        """
        self.swagger_types = {
            'enable_auto_retraining': bool,
            'performance_threshold': float,
            'feedback_collection_period': str
        }

        self.attribute_map = {
            'enable_auto_retraining': 'enable_auto_retraining',
            'performance_threshold': 'performance_threshold',
            'feedback_collection_period': 'feedback_collection_period'
        }
        self._enable_auto_retraining = enable_auto_retraining
        self._performance_threshold = performance_threshold
        self._feedback_collection_period = feedback_collection_period

    @classmethod
    def from_dict(cls, dikt) -> 'AdaptiveLearningRequestFeedbackLoopConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdaptiveLearningRequest_feedback_loop_configuration of this AdaptiveLearningRequestFeedbackLoopConfiguration.  # noqa: E501
        :rtype: AdaptiveLearningRequestFeedbackLoopConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_auto_retraining(self) -> bool:
        """Gets the enable_auto_retraining of this AdaptiveLearningRequestFeedbackLoopConfiguration.


        :return: The enable_auto_retraining of this AdaptiveLearningRequestFeedbackLoopConfiguration.
        :rtype: bool
        """
        return self._enable_auto_retraining

    @enable_auto_retraining.setter
    def enable_auto_retraining(self, enable_auto_retraining: bool):
        """Sets the enable_auto_retraining of this AdaptiveLearningRequestFeedbackLoopConfiguration.


        :param enable_auto_retraining: The enable_auto_retraining of this AdaptiveLearningRequestFeedbackLoopConfiguration.
        :type enable_auto_retraining: bool
        """

        self._enable_auto_retraining = enable_auto_retraining

    @property
    def performance_threshold(self) -> float:
        """Gets the performance_threshold of this AdaptiveLearningRequestFeedbackLoopConfiguration.

        Threshold below which model retraining is triggered  # noqa: E501

        :return: The performance_threshold of this AdaptiveLearningRequestFeedbackLoopConfiguration.
        :rtype: float
        """
        return self._performance_threshold

    @performance_threshold.setter
    def performance_threshold(self, performance_threshold: float):
        """Sets the performance_threshold of this AdaptiveLearningRequestFeedbackLoopConfiguration.

        Threshold below which model retraining is triggered  # noqa: E501

        :param performance_threshold: The performance_threshold of this AdaptiveLearningRequestFeedbackLoopConfiguration.
        :type performance_threshold: float
        """

        self._performance_threshold = performance_threshold

    @property
    def feedback_collection_period(self) -> str:
        """Gets the feedback_collection_period of this AdaptiveLearningRequestFeedbackLoopConfiguration.

        Time period for collecting performance metrics  # noqa: E501

        :return: The feedback_collection_period of this AdaptiveLearningRequestFeedbackLoopConfiguration.
        :rtype: str
        """
        return self._feedback_collection_period

    @feedback_collection_period.setter
    def feedback_collection_period(self, feedback_collection_period: str):
        """Sets the feedback_collection_period of this AdaptiveLearningRequestFeedbackLoopConfiguration.

        Time period for collecting performance metrics  # noqa: E501

        :param feedback_collection_period: The feedback_collection_period of this AdaptiveLearningRequestFeedbackLoopConfiguration.
        :type feedback_collection_period: str
        """

        self._feedback_collection_period = feedback_collection_period
