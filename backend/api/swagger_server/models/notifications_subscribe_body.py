# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.apinotificationssubscribe_region import ApinotificationssubscribeRegion  # noqa: F401,E501
from swagger_server.models.apinotificationssubscribe_smart_thresholds import ApinotificationssubscribeSmartThresholds  # noqa: F401,E501
from swagger_server.models.apinotificationssubscribe_threshold_parameters import ApinotificationssubscribeThresholdParameters  # noqa: F401,E501
from swagger_server import util


class NotificationsSubscribeBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, notification_type: str=None, region: ApinotificationssubscribeRegion=None, threshold_parameters: ApinotificationssubscribeThresholdParameters=None, smart_thresholds: ApinotificationssubscribeSmartThresholds=None, delivery_channel: str=None, delivery_target: str=None, expiration_days: int=None):  # noqa: E501
        """NotificationsSubscribeBody - a model defined in Swagger

        :param notification_type: The notification_type of this NotificationsSubscribeBody.  # noqa: E501
        :type notification_type: str
        :param region: The region of this NotificationsSubscribeBody.  # noqa: E501
        :type region: ApinotificationssubscribeRegion
        :param threshold_parameters: The threshold_parameters of this NotificationsSubscribeBody.  # noqa: E501
        :type threshold_parameters: ApinotificationssubscribeThresholdParameters
        :param smart_thresholds: The smart_thresholds of this NotificationsSubscribeBody.  # noqa: E501
        :type smart_thresholds: ApinotificationssubscribeSmartThresholds
        :param delivery_channel: The delivery_channel of this NotificationsSubscribeBody.  # noqa: E501
        :type delivery_channel: str
        :param delivery_target: The delivery_target of this NotificationsSubscribeBody.  # noqa: E501
        :type delivery_target: str
        :param expiration_days: The expiration_days of this NotificationsSubscribeBody.  # noqa: E501
        :type expiration_days: int
        """
        self.swagger_types = {
            'notification_type': str,
            'region': ApinotificationssubscribeRegion,
            'threshold_parameters': ApinotificationssubscribeThresholdParameters,
            'smart_thresholds': ApinotificationssubscribeSmartThresholds,
            'delivery_channel': str,
            'delivery_target': str,
            'expiration_days': int
        }

        self.attribute_map = {
            'notification_type': 'notification_type',
            'region': 'region',
            'threshold_parameters': 'threshold_parameters',
            'smart_thresholds': 'smart_thresholds',
            'delivery_channel': 'delivery_channel',
            'delivery_target': 'delivery_target',
            'expiration_days': 'expiration_days'
        }
        self._notification_type = notification_type
        self._region = region
        self._threshold_parameters = threshold_parameters
        self._smart_thresholds = smart_thresholds
        self._delivery_channel = delivery_channel
        self._delivery_target = delivery_target
        self._expiration_days = expiration_days

    @classmethod
    def from_dict(cls, dikt) -> 'NotificationsSubscribeBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The notifications_subscribe_body of this NotificationsSubscribeBody.  # noqa: E501
        :rtype: NotificationsSubscribeBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notification_type(self) -> str:
        """Gets the notification_type of this NotificationsSubscribeBody.


        :return: The notification_type of this NotificationsSubscribeBody.
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type: str):
        """Sets the notification_type of this NotificationsSubscribeBody.


        :param notification_type: The notification_type of this NotificationsSubscribeBody.
        :type notification_type: str
        """
        allowed_values = ["new_detection", "threshold_breach", "habitat_change", "outbreak_risk"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def region(self) -> ApinotificationssubscribeRegion:
        """Gets the region of this NotificationsSubscribeBody.


        :return: The region of this NotificationsSubscribeBody.
        :rtype: ApinotificationssubscribeRegion
        """
        return self._region

    @region.setter
    def region(self, region: ApinotificationssubscribeRegion):
        """Sets the region of this NotificationsSubscribeBody.


        :param region: The region of this NotificationsSubscribeBody.
        :type region: ApinotificationssubscribeRegion
        """

        self._region = region

    @property
    def threshold_parameters(self) -> ApinotificationssubscribeThresholdParameters:
        """Gets the threshold_parameters of this NotificationsSubscribeBody.


        :return: The threshold_parameters of this NotificationsSubscribeBody.
        :rtype: ApinotificationssubscribeThresholdParameters
        """
        return self._threshold_parameters

    @threshold_parameters.setter
    def threshold_parameters(self, threshold_parameters: ApinotificationssubscribeThresholdParameters):
        """Sets the threshold_parameters of this NotificationsSubscribeBody.


        :param threshold_parameters: The threshold_parameters of this NotificationsSubscribeBody.
        :type threshold_parameters: ApinotificationssubscribeThresholdParameters
        """

        self._threshold_parameters = threshold_parameters

    @property
    def smart_thresholds(self) -> ApinotificationssubscribeSmartThresholds:
        """Gets the smart_thresholds of this NotificationsSubscribeBody.


        :return: The smart_thresholds of this NotificationsSubscribeBody.
        :rtype: ApinotificationssubscribeSmartThresholds
        """
        return self._smart_thresholds

    @smart_thresholds.setter
    def smart_thresholds(self, smart_thresholds: ApinotificationssubscribeSmartThresholds):
        """Sets the smart_thresholds of this NotificationsSubscribeBody.


        :param smart_thresholds: The smart_thresholds of this NotificationsSubscribeBody.
        :type smart_thresholds: ApinotificationssubscribeSmartThresholds
        """

        self._smart_thresholds = smart_thresholds

    @property
    def delivery_channel(self) -> str:
        """Gets the delivery_channel of this NotificationsSubscribeBody.


        :return: The delivery_channel of this NotificationsSubscribeBody.
        :rtype: str
        """
        return self._delivery_channel

    @delivery_channel.setter
    def delivery_channel(self, delivery_channel: str):
        """Sets the delivery_channel of this NotificationsSubscribeBody.


        :param delivery_channel: The delivery_channel of this NotificationsSubscribeBody.
        :type delivery_channel: str
        """
        allowed_values = ["webhook", "email", "sms", "push_notification"]  # noqa: E501
        if delivery_channel not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_channel` ({0}), must be one of {1}"
                .format(delivery_channel, allowed_values)
            )

        self._delivery_channel = delivery_channel

    @property
    def delivery_target(self) -> str:
        """Gets the delivery_target of this NotificationsSubscribeBody.


        :return: The delivery_target of this NotificationsSubscribeBody.
        :rtype: str
        """
        return self._delivery_target

    @delivery_target.setter
    def delivery_target(self, delivery_target: str):
        """Sets the delivery_target of this NotificationsSubscribeBody.


        :param delivery_target: The delivery_target of this NotificationsSubscribeBody.
        :type delivery_target: str
        """

        self._delivery_target = delivery_target

    @property
    def expiration_days(self) -> int:
        """Gets the expiration_days of this NotificationsSubscribeBody.

        Number of days until subscription expires  # noqa: E501

        :return: The expiration_days of this NotificationsSubscribeBody.
        :rtype: int
        """
        return self._expiration_days

    @expiration_days.setter
    def expiration_days(self, expiration_days: int):
        """Sets the expiration_days of this NotificationsSubscribeBody.

        Number of days until subscription expires  # noqa: E501

        :param expiration_days: The expiration_days of this NotificationsSubscribeBody.
        :type expiration_days: int
        """

        self._expiration_days = expiration_days
