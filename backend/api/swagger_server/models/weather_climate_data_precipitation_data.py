# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WeatherClimateDataPrecipitationData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, timestamp: datetime=None, amount_mm: float=None, type: str=None):  # noqa: E501
        """WeatherClimateDataPrecipitationData - a model defined in Swagger

        :param timestamp: The timestamp of this WeatherClimateDataPrecipitationData.  # noqa: E501
        :type timestamp: datetime
        :param amount_mm: The amount_mm of this WeatherClimateDataPrecipitationData.  # noqa: E501
        :type amount_mm: float
        :param type: The type of this WeatherClimateDataPrecipitationData.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'timestamp': datetime,
            'amount_mm': float,
            'type': str
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'amount_mm': 'amount_mm',
            'type': 'type'
        }
        self._timestamp = timestamp
        self._amount_mm = amount_mm
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'WeatherClimateDataPrecipitationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WeatherClimateData_precipitation_data of this WeatherClimateDataPrecipitationData.  # noqa: E501
        :rtype: WeatherClimateDataPrecipitationData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this WeatherClimateDataPrecipitationData.


        :return: The timestamp of this WeatherClimateDataPrecipitationData.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this WeatherClimateDataPrecipitationData.


        :param timestamp: The timestamp of this WeatherClimateDataPrecipitationData.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def amount_mm(self) -> float:
        """Gets the amount_mm of this WeatherClimateDataPrecipitationData.


        :return: The amount_mm of this WeatherClimateDataPrecipitationData.
        :rtype: float
        """
        return self._amount_mm

    @amount_mm.setter
    def amount_mm(self, amount_mm: float):
        """Sets the amount_mm of this WeatherClimateDataPrecipitationData.


        :param amount_mm: The amount_mm of this WeatherClimateDataPrecipitationData.
        :type amount_mm: float
        """

        self._amount_mm = amount_mm

    @property
    def type(self) -> str:
        """Gets the type of this WeatherClimateDataPrecipitationData.


        :return: The type of this WeatherClimateDataPrecipitationData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this WeatherClimateDataPrecipitationData.


        :param type: The type of this WeatherClimateDataPrecipitationData.
        :type type: str
        """
        allowed_values = ["rain", "snow", "hail", "mixed"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
