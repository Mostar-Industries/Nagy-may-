# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.geo_coordinate import GeoCoordinate  # noqa: F401,E501
from swagger_server import util


class ApiTemporalanalysisBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, start_date: date=None, end_date: date=None, region_coordinates: List[GeoCoordinate]=None, temporal_resolution: str=None, analysis_type: str=None):  # noqa: E501
        """ApiTemporalanalysisBody - a model defined in Swagger

        :param start_date: The start_date of this ApiTemporalanalysisBody.  # noqa: E501
        :type start_date: date
        :param end_date: The end_date of this ApiTemporalanalysisBody.  # noqa: E501
        :type end_date: date
        :param region_coordinates: The region_coordinates of this ApiTemporalanalysisBody.  # noqa: E501
        :type region_coordinates: List[GeoCoordinate]
        :param temporal_resolution: The temporal_resolution of this ApiTemporalanalysisBody.  # noqa: E501
        :type temporal_resolution: str
        :param analysis_type: The analysis_type of this ApiTemporalanalysisBody.  # noqa: E501
        :type analysis_type: str
        """
        self.swagger_types = {
            'start_date': date,
            'end_date': date,
            'region_coordinates': List[GeoCoordinate],
            'temporal_resolution': str,
            'analysis_type': str
        }

        self.attribute_map = {
            'start_date': 'start_date',
            'end_date': 'end_date',
            'region_coordinates': 'region_coordinates',
            'temporal_resolution': 'temporal_resolution',
            'analysis_type': 'analysis_type'
        }
        self._start_date = start_date
        self._end_date = end_date
        self._region_coordinates = region_coordinates
        self._temporal_resolution = temporal_resolution
        self._analysis_type = analysis_type

    @classmethod
    def from_dict(cls, dikt) -> 'ApiTemporalanalysisBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The api_temporalanalysis_body of this ApiTemporalanalysisBody.  # noqa: E501
        :rtype: ApiTemporalanalysisBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_date(self) -> date:
        """Gets the start_date of this ApiTemporalanalysisBody.


        :return: The start_date of this ApiTemporalanalysisBody.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: date):
        """Sets the start_date of this ApiTemporalanalysisBody.


        :param start_date: The start_date of this ApiTemporalanalysisBody.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def end_date(self) -> date:
        """Gets the end_date of this ApiTemporalanalysisBody.


        :return: The end_date of this ApiTemporalanalysisBody.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: date):
        """Sets the end_date of this ApiTemporalanalysisBody.


        :param end_date: The end_date of this ApiTemporalanalysisBody.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def region_coordinates(self) -> List[GeoCoordinate]:
        """Gets the region_coordinates of this ApiTemporalanalysisBody.


        :return: The region_coordinates of this ApiTemporalanalysisBody.
        :rtype: List[GeoCoordinate]
        """
        return self._region_coordinates

    @region_coordinates.setter
    def region_coordinates(self, region_coordinates: List[GeoCoordinate]):
        """Sets the region_coordinates of this ApiTemporalanalysisBody.


        :param region_coordinates: The region_coordinates of this ApiTemporalanalysisBody.
        :type region_coordinates: List[GeoCoordinate]
        """

        self._region_coordinates = region_coordinates

    @property
    def temporal_resolution(self) -> str:
        """Gets the temporal_resolution of this ApiTemporalanalysisBody.


        :return: The temporal_resolution of this ApiTemporalanalysisBody.
        :rtype: str
        """
        return self._temporal_resolution

    @temporal_resolution.setter
    def temporal_resolution(self, temporal_resolution: str):
        """Sets the temporal_resolution of this ApiTemporalanalysisBody.


        :param temporal_resolution: The temporal_resolution of this ApiTemporalanalysisBody.
        :type temporal_resolution: str
        """
        allowed_values = ["hourly", "daily", "weekly", "monthly"]  # noqa: E501
        if temporal_resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `temporal_resolution` ({0}), must be one of {1}"
                .format(temporal_resolution, allowed_values)
            )

        self._temporal_resolution = temporal_resolution

    @property
    def analysis_type(self) -> str:
        """Gets the analysis_type of this ApiTemporalanalysisBody.


        :return: The analysis_type of this ApiTemporalanalysisBody.
        :rtype: str
        """
        return self._analysis_type

    @analysis_type.setter
    def analysis_type(self, analysis_type: str):
        """Sets the analysis_type of this ApiTemporalanalysisBody.


        :param analysis_type: The analysis_type of this ApiTemporalanalysisBody.
        :type analysis_type: str
        """
        allowed_values = ["trend", "seasonality", "anomaly", "forecast"]  # noqa: E501
        if analysis_type not in allowed_values:
            raise ValueError(
                "Invalid value for `analysis_type` ({0}), must be one of {1}"
                .format(analysis_type, allowed_values)
            )

        self._analysis_type = analysis_type
