# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApinotificationssubscribeThresholdParameters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, population_density: float=None, suitability_score: float=None, movement_rate: float=None):  # noqa: E501
        """ApinotificationssubscribeThresholdParameters - a model defined in Swagger

        :param population_density: The population_density of this ApinotificationssubscribeThresholdParameters.  # noqa: E501
        :type population_density: float
        :param suitability_score: The suitability_score of this ApinotificationssubscribeThresholdParameters.  # noqa: E501
        :type suitability_score: float
        :param movement_rate: The movement_rate of this ApinotificationssubscribeThresholdParameters.  # noqa: E501
        :type movement_rate: float
        """
        self.swagger_types = {
            'population_density': float,
            'suitability_score': float,
            'movement_rate': float
        }

        self.attribute_map = {
            'population_density': 'population_density',
            'suitability_score': 'suitability_score',
            'movement_rate': 'movement_rate'
        }
        self._population_density = population_density
        self._suitability_score = suitability_score
        self._movement_rate = movement_rate

    @classmethod
    def from_dict(cls, dikt) -> 'ApinotificationssubscribeThresholdParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The apinotificationssubscribe_threshold_parameters of this ApinotificationssubscribeThresholdParameters.  # noqa: E501
        :rtype: ApinotificationssubscribeThresholdParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def population_density(self) -> float:
        """Gets the population_density of this ApinotificationssubscribeThresholdParameters.


        :return: The population_density of this ApinotificationssubscribeThresholdParameters.
        :rtype: float
        """
        return self._population_density

    @population_density.setter
    def population_density(self, population_density: float):
        """Sets the population_density of this ApinotificationssubscribeThresholdParameters.


        :param population_density: The population_density of this ApinotificationssubscribeThresholdParameters.
        :type population_density: float
        """

        self._population_density = population_density

    @property
    def suitability_score(self) -> float:
        """Gets the suitability_score of this ApinotificationssubscribeThresholdParameters.


        :return: The suitability_score of this ApinotificationssubscribeThresholdParameters.
        :rtype: float
        """
        return self._suitability_score

    @suitability_score.setter
    def suitability_score(self, suitability_score: float):
        """Sets the suitability_score of this ApinotificationssubscribeThresholdParameters.


        :param suitability_score: The suitability_score of this ApinotificationssubscribeThresholdParameters.
        :type suitability_score: float
        """

        self._suitability_score = suitability_score

    @property
    def movement_rate(self) -> float:
        """Gets the movement_rate of this ApinotificationssubscribeThresholdParameters.


        :return: The movement_rate of this ApinotificationssubscribeThresholdParameters.
        :rtype: float
        """
        return self._movement_rate

    @movement_rate.setter
    def movement_rate(self, movement_rate: float):
        """Sets the movement_rate of this ApinotificationssubscribeThresholdParameters.


        :param movement_rate: The movement_rate of this ApinotificationssubscribeThresholdParameters.
        :type movement_rate: float
        """

        self._movement_rate = movement_rate
