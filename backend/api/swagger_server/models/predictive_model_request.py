# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.habitat_analysis_request_environmental_data import HabitatAnalysisRequestEnvironmentalData  # noqa: F401,E501
from swagger_server.models.predictive_model_request_adaptive_context import PredictiveModelRequestAdaptiveContext  # noqa: F401,E501
from swagger_server.models.predictive_model_request_multi_source_features import PredictiveModelRequestMultiSourceFeatures  # noqa: F401,E501
from swagger_server import util


class PredictiveModelRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, model_type: str=None, input_features: HabitatAnalysisRequestEnvironmentalData=None, adaptive_context: PredictiveModelRequestAdaptiveContext=None, multi_source_features: PredictiveModelRequestMultiSourceFeatures=None, output_type: str=None):  # noqa: E501
        """PredictiveModelRequest - a model defined in Swagger

        :param model_type: The model_type of this PredictiveModelRequest.  # noqa: E501
        :type model_type: str
        :param input_features: The input_features of this PredictiveModelRequest.  # noqa: E501
        :type input_features: HabitatAnalysisRequestEnvironmentalData
        :param adaptive_context: The adaptive_context of this PredictiveModelRequest.  # noqa: E501
        :type adaptive_context: PredictiveModelRequestAdaptiveContext
        :param multi_source_features: The multi_source_features of this PredictiveModelRequest.  # noqa: E501
        :type multi_source_features: PredictiveModelRequestMultiSourceFeatures
        :param output_type: The output_type of this PredictiveModelRequest.  # noqa: E501
        :type output_type: str
        """
        self.swagger_types = {
            'model_type': str,
            'input_features': HabitatAnalysisRequestEnvironmentalData,
            'adaptive_context': PredictiveModelRequestAdaptiveContext,
            'multi_source_features': PredictiveModelRequestMultiSourceFeatures,
            'output_type': str
        }

        self.attribute_map = {
            'model_type': 'model_type',
            'input_features': 'input_features',
            'adaptive_context': 'adaptive_context',
            'multi_source_features': 'multi_source_features',
            'output_type': 'output_type'
        }
        self._model_type = model_type
        self._input_features = input_features
        self._adaptive_context = adaptive_context
        self._multi_source_features = multi_source_features
        self._output_type = output_type

    @classmethod
    def from_dict(cls, dikt) -> 'PredictiveModelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PredictiveModelRequest of this PredictiveModelRequest.  # noqa: E501
        :rtype: PredictiveModelRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_type(self) -> str:
        """Gets the model_type of this PredictiveModelRequest.

        The predictive model to use  # noqa: E501

        :return: The model_type of this PredictiveModelRequest.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type: str):
        """Sets the model_type of this PredictiveModelRequest.

        The predictive model to use  # noqa: E501

        :param model_type: The model_type of this PredictiveModelRequest.
        :type model_type: str
        """
        allowed_values = ["linear_regression", "random_forest", "lstm", "xgboost", "prophet", "autoencoder"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def input_features(self) -> HabitatAnalysisRequestEnvironmentalData:
        """Gets the input_features of this PredictiveModelRequest.


        :return: The input_features of this PredictiveModelRequest.
        :rtype: HabitatAnalysisRequestEnvironmentalData
        """
        return self._input_features

    @input_features.setter
    def input_features(self, input_features: HabitatAnalysisRequestEnvironmentalData):
        """Sets the input_features of this PredictiveModelRequest.


        :param input_features: The input_features of this PredictiveModelRequest.
        :type input_features: HabitatAnalysisRequestEnvironmentalData
        """

        self._input_features = input_features

    @property
    def adaptive_context(self) -> PredictiveModelRequestAdaptiveContext:
        """Gets the adaptive_context of this PredictiveModelRequest.


        :return: The adaptive_context of this PredictiveModelRequest.
        :rtype: PredictiveModelRequestAdaptiveContext
        """
        return self._adaptive_context

    @adaptive_context.setter
    def adaptive_context(self, adaptive_context: PredictiveModelRequestAdaptiveContext):
        """Sets the adaptive_context of this PredictiveModelRequest.


        :param adaptive_context: The adaptive_context of this PredictiveModelRequest.
        :type adaptive_context: PredictiveModelRequestAdaptiveContext
        """

        self._adaptive_context = adaptive_context

    @property
    def multi_source_features(self) -> PredictiveModelRequestMultiSourceFeatures:
        """Gets the multi_source_features of this PredictiveModelRequest.


        :return: The multi_source_features of this PredictiveModelRequest.
        :rtype: PredictiveModelRequestMultiSourceFeatures
        """
        return self._multi_source_features

    @multi_source_features.setter
    def multi_source_features(self, multi_source_features: PredictiveModelRequestMultiSourceFeatures):
        """Sets the multi_source_features of this PredictiveModelRequest.


        :param multi_source_features: The multi_source_features of this PredictiveModelRequest.
        :type multi_source_features: PredictiveModelRequestMultiSourceFeatures
        """

        self._multi_source_features = multi_source_features

    @property
    def output_type(self) -> str:
        """Gets the output_type of this PredictiveModelRequest.

        Type of prediction output  # noqa: E501

        :return: The output_type of this PredictiveModelRequest.
        :rtype: str
        """
        return self._output_type

    @output_type.setter
    def output_type(self, output_type: str):
        """Sets the output_type of this PredictiveModelRequest.

        Type of prediction output  # noqa: E501

        :param output_type: The output_type of this PredictiveModelRequest.
        :type output_type: str
        """
        allowed_values = ["probability", "forecast"]  # noqa: E501
        if output_type not in allowed_values:
            raise ValueError(
                "Invalid value for `output_type` ({0}), must be one of {1}"
                .format(output_type, allowed_values)
            )

        self._output_type = output_type
